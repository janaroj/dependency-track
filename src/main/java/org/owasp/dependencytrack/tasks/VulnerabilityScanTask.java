/*
 * This file is part of Dependency-Track.
 *
 * Dependency-Track is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Dependency-Track is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Dependency-Track. If not, see http://www.gnu.org/licenses/.
 *
 * Copyright (c) Axway. All Rights Reserved.
 */
package org.owasp.dependencytrack.tasks;

import lombok.extern.java.Log;

import org.hibernate.SessionFactory;
import org.owasp.dependencytrack.service.VulnerabilityService;
import org.owasp.dependencytrack.tasks.dependencycheck.DependencyCheckAnalysis;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.transaction.annotation.Transactional;

/**
 * A Spring task to execute a Dependency-Check scan every 24 hours.
 *
 * @author Steve Springett (steve.springett@owasp.org)
 */
@Log
public class VulnerabilityScanTask implements ApplicationContextAware {

    /**
     * The Spring ApplicationContext
     */
    private ApplicationContext context;

    /**
     * The Hibernate SessionFactory
     */
    @Autowired
    private SessionFactory sessionFactory;

    /**
     * The Dependency-Track Vulnerability Service
     */
    @Autowired
    private VulnerabilityService vulnerabilityService;

    public ApplicationContext getContext() {
        return context;
    }

    @Override
    public void setApplicationContext(ApplicationContext context) throws BeansException {
        this.context = context;
    }

    /**
     * Executes a Dependency-Check scan against all defined LibraryVersions.
     */
    @Transactional
    @Scheduled(fixedRate = 86400000) // every 24 hours
    public void doUpdates() {
        log.info("Starting Dependency-Check scheduled analysis");
        final DependencyCheckAnalysis task = new DependencyCheckAnalysis(sessionFactory);
        task.execute();
        vulnerabilityService.updateLibraryVersionVulnerabilityCount();
        vulnerabilityService.updateApplicationVersionVulnerabilityCount();
    }
}
